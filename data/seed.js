const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
require('dotenv').config();

// Import models - you'll need to adjust paths based on your actual model locations
const User = require('../models/User');
const Ticket = require('../models/Ticket');
const Command = require('../models/Command');
const Unit = require('../models/Unit');

// Connect to MongoDB
async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('Connected to MongoDB Atlas');
  } catch (error) {
    console.error('MongoDB connection error:', error);
    process.exit(1);
  }
}

// Sample data
const commands = [
  { name: '◊§◊ß◊û"◊ñ', description: '◊§◊ô◊ß◊ï◊ì ◊î◊û◊ó◊ï◊ñ' },
  { name: '◊§◊ß◊¢"◊ê', description: '◊§◊ô◊ß◊ï◊ì ◊¢◊ï◊®◊£ ◊ê◊ñ◊®◊ó◊ô' },
  { name: '◊¶◊î"◊ú', description: '◊¶◊ë◊ê ◊î◊í◊†◊î ◊ú◊ô◊©◊®◊ê◊ú' },
  { name: '◊û◊©◊ò◊®◊î', description: '◊û◊©◊ò◊®◊™ ◊ô◊©◊®◊ê◊ú' },
  { name: '◊õ◊ë"◊î', description: '◊õ◊ë◊ê◊ï◊™ ◊ï◊î◊¶◊ú◊î' }
];

const units = [
  { name: '◊û◊®◊§"◊ê 8282', commandName: '◊§◊ß◊û"◊ñ', description: '◊û◊®◊õ◊ñ ◊®◊§◊ï◊ê◊ô' },
  { name: '◊ô◊ó◊©"◊ù 650 ◊í\'◊ï◊ú◊ô◊°', commandName: '◊§◊ß◊û"◊ñ', description: '◊ô◊ó◊ô◊ì◊™ ◊ó◊©◊û◊ú' },
  { name: '◊ô◊ó◊ñ◊ß"◊ê 441', commandName: '◊§◊ß◊û"◊ñ', description: '◊ô◊ó◊ô◊ì◊™ ◊ó◊ñ◊ß◊î' },
  { name: '◊û◊í"◊ì 331', commandName: '◊§◊ß◊¢"◊ê', description: '◊û◊í◊ì ◊¢◊ï◊®◊£' },
  { name: '◊ó◊ò◊ô◊ë◊™ ◊í◊ï◊ú◊†◊ô', commandName: '◊¶◊î"◊ú', description: '◊ó◊ò◊ô◊ë◊™ ◊ó◊ô"◊®' },
  { name: '◊™◊ó◊†◊™ ◊ô◊®◊ï◊©◊ú◊ô◊ù', commandName: '◊û◊©◊ò◊®◊î', description: '◊™◊ó◊†◊™ ◊û◊©◊ò◊®◊î' },
  { name: '◊™◊ó◊†◊î ◊û◊®◊õ◊ñ', commandName: '◊õ◊ë"◊î', description: '◊™◊ó◊†◊™ ◊õ◊ô◊ë◊ï◊ô' }
];

const users = [
  {
    username: 'admin',
    password: 'admin123',
    role: 'admin',
    command: '◊§◊ß◊û"◊ñ',
    unit: '◊û◊®◊§"◊ê 8282'
  },
  {
    username: 'technician1',
    password: 'tech123',
    role: 'technician',
    command: '◊§◊ß◊û"◊ñ',
    unit: '◊ô◊ó◊©"◊ù 650 ◊í\'◊ï◊ú◊ô◊°'
  },
  {
    username: 'technician2',
    password: 'tech123',
    role: 'technician',
    command: '◊§◊ß◊¢"◊ê',
    unit: '◊û◊í"◊ì 331'
  },
  {
    username: 'viewer1',
    password: 'view123',
    role: 'viewer',
    command: '◊¶◊î"◊ú',
    unit: '◊ó◊ò◊ô◊ë◊™ ◊í◊ï◊ú◊†◊ô'
  }
];

const sampleTickets = [
  {
    ticketNumber: 5335,
    command: '◊§◊ß◊û"◊ñ',
    unit: '◊û◊®◊§"◊ê 8282',
    priority: '◊ì◊ó◊ï◊§◊î',
    status: '◊ë◊ò◊ô◊§◊ï◊ú',
    isRecurring: false,
    description: '◊™◊ß◊ú◊î ◊ë◊û◊¢◊®◊õ◊™ ◊î◊û◊ô◊ñ◊ï◊í ◊ë◊û◊ë◊†◊î A - ◊î◊ò◊û◊§◊®◊ò◊ï◊®◊î ◊¢◊ï◊ú◊î ◊û◊¢◊ú 30 ◊û◊¢◊ú◊ï◊™',
    openDate: new Date('2025-01-15T08:30:00'),
    createdBy: 'technician1',
    assignedTechnician: 'technician1'
  },
  {
    ticketNumber: 5334,
    command: '◊§◊ß◊û"◊ñ',
    unit: '◊ô◊ó◊©"◊ù 650 ◊í\'◊ï◊ú◊ô◊°',
    priority: '◊û◊ë◊¶◊¢◊ô◊™',
    status: '◊§◊™◊ï◊ó',
    isRecurring: true,
    description: '◊î◊§◊°◊ß◊™ ◊ó◊©◊û◊ú ◊ó◊ï◊ñ◊®◊™ ◊ë◊ß◊ï ◊î◊®◊ê◊©◊ô - ◊†◊ì◊®◊©◊™ ◊ë◊ì◊ô◊ß◊î ◊û◊ô◊ô◊ì◊ô◊™ ◊©◊ú ◊î◊ò◊®◊†◊°◊§◊ï◊®◊û◊ò◊ï◊®',
    openDate: new Date('2025-01-14T14:15:00'),
    createdBy: 'technician1'
  },
  {
    ticketNumber: 5333,
    command: '◊§◊ß◊¢"◊ê',
    unit: '◊û◊í"◊ì 331',
    priority: '◊®◊í◊ô◊ú◊î',
    status: '◊™◊ï◊ß◊ü',
    isRecurring: false,
    description: '◊î◊ó◊ú◊§◊™ ◊†◊ï◊®◊ï◊™ ◊©◊®◊ï◊§◊ï◊™ ◊ë◊û◊°◊ì◊®◊ï◊ü ◊î◊®◊ê◊©◊ô',
    openDate: new Date('2025-01-13T11:20:00'),
    closeDate: new Date('2025-01-13T15:45:00'),
    createdBy: 'technician2',
    assignedTechnician: 'technician2'
  }
];

// Seed functions
async function seedCommands() {
  try {
    await Command.deleteMany({});
    console.log('Cleared existing commands');
    
    const createdCommands = await Command.insertMany(commands);
    console.log(`Created ${createdCommands.length} commands`);
    
    return createdCommands;
  } catch (error) {
    console.error('Error seeding commands:', error);
  }
}

async function seedUnits(createdCommands) {
  try {
    await Unit.deleteMany({});
    console.log('Cleared existing units');
    
    const unitsWithIds = units.map(unit => {
      const command = createdCommands.find(c => c.name === unit.commandName);
      return {
        ...unit,
        commandId: command._id
      };
    });
    
    const createdUnits = await Unit.insertMany(unitsWithIds);
    console.log(`Created ${createdUnits.length} units`);
    
    return createdUnits;
  } catch (error) {
    console.error('Error seeding units:', error);
  }
}

async function seedUsers() {
  try {
    await User.deleteMany({});
    console.log('Cleared existing users');
    
    const hashedUsers = await Promise.all(
      users.map(async (user) => {
        const hashedPassword = await bcrypt.hash(user.password, 12);
        return {
          ...user,
          password: hashedPassword
        };
      })
    );
    
    const createdUsers = await User.insertMany(hashedUsers);
    console.log(`Created ${createdUsers.length} users`);
    
    return createdUsers;
  } catch (error) {
    console.error('Error seeding users:', error);
  }
}

async function seedTickets() {
  try {
    await Ticket.deleteMany({});
    console.log('Cleared existing tickets');
    
    const createdTickets = await Ticket.insertMany(sampleTickets);
    console.log(`Created ${createdTickets.length} tickets`);
    
    return createdTickets;
  } catch (error) {
    console.error('Error seeding tickets:', error);
  }
}

// Main seed function
async function seedDatabase() {
  try {
    await connectDB();
    
    console.log('üå± Starting database seeding...');
    
    const createdCommands = await seedCommands();
    const createdUnits = await seedUnits(createdCommands);
    const createdUsers = await seedUsers();
    const createdTickets = await seedTickets();
    
    console.log('‚úÖ Database seeding completed successfully!');
    console.log('\nüìä Summary:');
    console.log(`Commands: ${createdCommands.length}`);
    console.log(`Units: ${createdUnits.length}`);
    console.log(`Users: ${createdUsers.length}`);
    console.log(`Tickets: ${createdTickets.length}`);
    
    console.log('\nüë§ Default users created:');
    console.log('Admin: admin / admin123');
    console.log('Technician 1: technician1 / tech123');
    console.log('Technician 2: technician2 / tech123');
    console.log('Viewer: viewer1 / view123');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Database seeding failed:', error);
    process.exit(1);
  }
}

// Run seeding if this file is executed directly
if (require.main === module) {
  seedDatabase();
}

module.exports = { seedDatabase };
